#!/bin/bash

MIRROR_URL=$(cat /etc/cydrafetch/currentMirror)
PM_URL=$(cat /etc/cydraterms/mainserver.list)
CORE_BRANCH="core"
MULTILIB_BRANCH="multilib"
EXTRA_BRANCH="extra"
POOL_BRANCH="pool"
CYDRA_BRANCH="cydra"
CACHE_FILE="/etc/cydramanager/cache"
INSTALL_DIR="/etc/cydramanager/installdir/"
FETCH_DIR="/etc/cydrafetch/"
CORE_DL_URL="${MIRROR_URL}/${CORE_BRANCH}/os/x86_64/${CORE_BRANCH}.db.tar.gz"
MULTILIB_DL_URL="${MIRROR_URL}/${MULTILIB_BRANCH}/os/x86_64/${MULTILIB_BRANCH}.db.tar.gz"
EXTRA_DL_URL="${MIRROR_URL}/${EXTRA_BRANCH}/os/x86_64/${EXTRA_BRANCH}.db.tar.gz"
CYDRA_DL_URL="${PM_URL}/pm/${CYDRA_BRANCH}/${CYDRA_BRANCH}.tar.gz"
CORE_DL="${MIRROR_URL}/${CORE_BRANCH}/os/x86_64"
MULTILIB_DL="${MIRROR_URL}/${MULTILIB_BRANCH}/os/x86_64"
EXTRA_DL="${MIRROR_URL}/${EXTRA_BRANCH}/os/x86_64"
POOL_DL="${MIRROR_URL}/${POOL_BRANCH}/packages"
CYDRA_DL="${PM_URL}/pm/${CYDRA_BRANCH}"
DEPS_FILE="${CACHE_FILE}/depsfile.list"
SECONDDEPS_FILE="${CACHE_FILE}/sdepsfile.list"
PKG_INFO_ARG="desc"
GREEN='\033[0;32m'
RED='\033[0;31m'
ORANGE='\033[0;33m'
NC='\033[0m'
INSTALLED_SOFTWARE_DB=$(cat /etc/cydraterms/installedsoftware.list)
USER_INSTALLED_SOFTWARE_DB=$(cat /etc/cydraterms/usersoftware.list)
OUTDATED_LIST=$(cat /etc/cydraterms/outdated.list)
CHANGELOG="/etc/cydraterms/changelogs.log"

PRINT_LOG=true
REGISTER_VAR=true
SHOW_HELP=false
PRINT_MIRROR=false
WASH_CACHE=true
INSTALL_PACMAN=true
UPDATE_DB=true
ADD_AS_DEPS=false
PACKAGE="$2"

for arg in "$@"; do
  case "$arg" in
    --without-printing-log)
      PRINT_LOG=false
      ;;
    --print-mirror)
      PRINT_MIRROR=true
      ;;
    -h | -help | --help)
      SHOW_HELP=true
      ;;
    --without-washing-cache)
      WASH_CACHE=false
      ;;
    --install-pacman-while-update)
      INSTALL_PACMAN=true
      ;;
    --without-updating-db)
      UPDATE_DB=false
      ;;
    --add-as-depends)
      ADD_AS_DEPS=true
      ;;
    --filter-result)
      FILTER=RESULT=true
      ;;
  esac
done

if [[ $EUID -ne 0 ]]; then
   if [ "$PRINT_LOG" = true ]; then
    echo -e "${RED}Ce script doit etre execute avec les privileges root${NC}"
    exit 1
   fi
fi

function open_help {
      echo "Cydramanager - Gestionnaire de paquets simple pour CydraOS"

      echo "Utilisation: cydramanager [install/remove/...] [nom_du_paquet] [arguments]"

      echo "Options:                                                   Arguments:"
      echo "  install              Installe le paquet specifie          --without-printing-log              Le gdp n'envoira aucun message               --add-as-depends             Le gdp interpretera le packet comme etant une dependance"
      echo "  remove               Supprime le paquet specifie          --without-registering-var           Le gdp n'utiliseras aucune variables         "
      echo "  update               Met a jour tout les packets          --print-mirror                      Permet d'affiche le mirror utilisee          "
      echo "  fetch                Permet de changer de mirror           --without-washing-cache             Le gdp ne supprimeras pas le cachee         "
      echo "  version              Affiche la version du gdp            --install-pacman-while-update       Le gdp installera pacman durant la maj       "
      echo "  patchnote            Affiche les nouveaute du gdp         --without-updating-db               Le gdp ne metteras pas a jour les db local   "
      echo "  help                 Affiche ce message d'aide            -h / --help / -help                 Permet d'affiche ce message d'aide           "

      exit 0
}

function update_db {
     if [ "$PRINT_LOG" = true ]; then
         echo -e "${GREEN}Mise a jour de la base de donne des packets.${NC}"
     fi
     if [ "$UPDATE_DB" = true ]; then
        wget ${CORE_DL_URL} -P ${CACHE_FILE} --no-check-certificate -q
        wget ${MULTILIB_DL_URL} -P ${CACHE_FILE} --no-check-certificate -q
        wget ${EXTRA_DL_URL} -P ${CACHE_FILE} --no-check-certificate -q
        wget ${CYDRA_DL_URL} -P ${CACHE_FILE} --no-check-certificate -q

        tar xf ${CACHE_FILE}/core.db.tar.gz -C ${CACHE_FILE} > /dev/null 2>&1;
        tar xf ${CACHE_FILE}/multilib.db.tar.gz -C ${CACHE_FILE} > /dev/null 2>&1;
        tar xf ${CACHE_FILE}/extra.db.tar.gz -C ${CACHE_FILE} > /dev/null 2>&1;
        tar xf ${CACHE_FILE}/cydra.tar.gz -C ${CACHE_FILE} > /dev/null 2>&1;

        touch "${DEPS_FILE}"
        fi

     if [ "$PRINT_LOG" = true ]; then
         echo -e "${GREEN}La base de donne des packets a ete mis a jour.${NC}"
     fi
}

function wash_packet {
  rm -rf ${CACHE_FILE}/core.*
  rm -rf ${CACHE_FILE}/*.pkg.tar.zst.sig

  rm -rf ${CACHE_FILE}/coreutils-9.4-2-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/coreutils-9.4-2-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/archlinux-keyring-20231026-1-any.pkg.tar.zst
  rm -rf ${CACHE_FILE}/bash-5.2.015-5-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/efibootmgr-18-2-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/efivar-38-3-x86_64.pkg.tar.zst.sig
  rm -rf ${CACHE_FILE}/gc-8.2.4-1-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/gcc-13.2.1-3-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/gcc-ada-13.2.1-3-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/gcc-d-13.2.1-3-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/gcc-fortran-13.2.1-3-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/gcc-go-13.2.1-3-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/gcc-libs-13.2.1-3-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/glib2-2.78.1-1-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/glib2-docs-2.78.1-1-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/glibc-2.38-7-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/glibc-locales-2.38-7-x86_64.pkg.tar.zst
  if [[ "$INSTALL_PACMAN" == true ]]; then
    rm -rf ${CACHE_FILE}/pacman-6.0.2-8-x86_64.pkg.tar.zst
    rm -rf ${CACHE_FILE}/pacman-mirrorlist-20231001-1-any.pkg.tar.zst
  fi
  rm -rf ${CACHE_FILE}/shadow-4.14.2-1-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/util-linux-2.39.2-1-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/util-linux-libs-2.39.2-1-x86_64.pkg.tar.zst
  rm -rf ${CACHE_FILE}/linux-*
  rm -rf ${CACHE_FILE}/aarch64-linux-*
}

function ask_to_continue {
    if [ "$ADD_AS_DEPS" = false ]; then
          if [ "$PRINT_LOG" = true ]; then
             echo -en "${NC}Voulez vous procede a l'installation ? ----- [Y/N]: "
          fi
          read asking
          if [[ "${asking}" == "N" || "${asking}" == "n" ]]; then
               if [ "$PRINT_LOG" = true ]; then
                   echo -e "${ORANGE}Arret de l'installation${NC}"
               fi
               rm -rf /etc/cydramanager
               exit 0
          fi
    fi
}

function fecth_warninglog {
    if [ "$PRINT_LOG" = true ]; then
       echo -e "${GREEN}UTILISE UN MIRROR PERSONALISE PEU CREER DES FAILLES DE SECURITE IMPORTANTES UTILISEZ LES UNIQUEMENT SI VOUS EN AVEZ CONFIANCE!\n\n ${NC}"
       echo -e "${GREEN}Le mirror ${lastMirror} seras utilise par le gestionnaire de packet${NC}"
    fi
}

function install_packet {
    if [ "$PRINT_LOG" = true ]; then
        echo -e "${GREEN}Installation du packet${NC}"
    fi
    wget "${POOL_DL}/${PKG_ARCHIVE}" -P ${INSTALL_DIR} --no-check-certificate -q

    chmod +rwx "${INSTALL_DIR}${PKG_ARCHIVE}"
    tar xf "${INSTALL_DIR}${PKG_ARCHIVE}" -C /

    if [ "$PRINT_LOG" = true ]; then
       echo -e "${GREEN}Packet installe avec succes${NC}"
    fi
}

function install_deps {
    depsList=()
    readState=0
    while IFS= read -r line; do

        if [ $readState -eq 1 ]; then
            if [ -z "$line" ]; then
                break
            fi
            depsList+=("$line")
        fi

        if [[ "$line" == "%DEPENDS%" ]]; then
            readState=1
        fi
    done < "${PKG_INFO}"

    for element in "${depsList[@]}"; do
          echo "${element}" > ${DEPS_FILE}
    done
    DEPS_NUMBER=$(wc -l ${DEPS_FILE} | awk '{print $1}')
    for ((i=1; i<=$DEPS_NUMBER; i++)); do
        DEPS_NAME=$(sed -n "${i}p" "${DEPS_FILE}")
        DEPS_INFO=$(grep -r -l -m 1 -o "$DEPS_NAME-" /etc/cydramanager/cache | head -1)
        DEPS_VERSION=$(sed -n 11p "${DEPS_INFO}")
        DEPS_ARCHIVE=$(sed -n 2p "${DEPS_INFO}")

        if [[ ${DEPS_INFO} =~ *"${DEPS_NAME}"* ]]; then
          echo -e "${ORANGE}La dépendence ${DEPS_NAME} n'est pas trouvé dans la base de données..${NC}"
          exit 1
        elif [[ -z ${DEPS_INFO} ]]; then
          echo -e "${ORANGE}La dépendence ${DEPS_NAME} n'est pas trouvé dans la base de données..${NC}"
          exit 1
        fi

        wget "${POOL_DL}/${DEPS_ARCHIVE}" -P ${INSTALL_DIR} --no-check-certificate -q

        chmod +rwx "${INSTALL_DIR}${DEPS_ARCHIVE}"
        tar xf "${INSTALL_DIR}${DEPS_ARCHIVE}" -C /

        echo "${DEPS_NAME} ${DEPS_VERSION}" > "${USER_INSTALLED_SOFTWARE_DB}"
    done
}

if [ "$SHOW_HELP" = true ]; then
  if [ "$PRINT_LOG" = true ]; then
    open_help
  fi
fi

if [ "$PRINT_MIRROR" = true ]; then
   echo "${MIRROR_URL}"
   exit 0
fi

if [[ "$1" != "install" && "$1" != "remove" && "$1" != "update" && "$1" != "fetch" && "$1" != "help" && "$1" != "version" && "$1" != "patchnote" ]]; then
    if [ "$PRINT_LOG" = true ]; then
      echo -e "${RED}L'action est invalide. Etes vous perdu? \n cydramanager -h pour ouvrir la liste des commandes / arguments disponibles !${NC}"
      exit 1
    fi
fi

if [[ "$1" == "install" ]]; then
    if ! [[ -d ${CACHE_FILE} ]]; then
       mkdir -p ${CACHE_FILE}
       mkdir -p ${INSTALL_DIR}
    elif [ "$WASH_CACHE" = true ]; then
         rm -rf ${CACHE_FILE}/*
         rm -rf ${INSTALL_DIR}*
    fi

    update_db
    PKG_INFO=$(grep -r -l -m 1 -o "$PACKAGE-" /etc/cydramanager/cache | head -1)
    PKG_VERSION=$(sed -n 11p "${PKG_INFO}")
    PKG_ARCHIVE=$(sed -n 2p "${PKG_INFO}")
    PKG_NAME=$(sed -n 5p "${PKG_INFO}")

    if grep -q "^${PKG_NAME}[[:space:]]" "${USER_INSTALLED_SOFTWARE_DB}"; then
        VERSION=$(grep "^${PKG_NAME}[[:space:]]" "${USER_INSTALLED_SOFTWARE_DB}" | awk '{print $2}')
        
        if [ "$VERSION" = "$PKG_VERSION" ]; then
            echo -e "${RED}Erreur: Le paquet ${PKG_NAME} version ${PKG_VERSION} est déjà installé sur votre système.${NC}"
            ask_to_continue
        else
            echo -e "${RED}Le paquet ${PKG_NAME} est déjà installé sur votre système avec une version différente.${NC}"
            ask_to_continue
        fi
    fi

    if grep -q "^${PKG_NAME}[[:space:]]" "${INSTALLED_SOFTWARE_DB}"; then
        VERSION=$(grep "^${PKG_NAME}[[:space:]]" "${INSTALLED_SOFTWARE_DB}" | awk '{print $2}')
        
        if [ "$VERSION" = "$PKG_VERSION" ]; then
            echo -e "${RED}Erreur: Le paquet ${PKG_NAME} version ${PKG_VERSION} est déjà installé sur votre système.${NC}"
            ask_to_continue
        else
            echo -e "${RED}Le paquet ${PKG_NAME} est déjà installé sur votre système avec une version différente.${NC}"
            ask_to_continue
        fi
    fi

    # shellcheck disable=SC2049
    if [ "$ADD_AS_DEPS" = false ]; then
        if [[ ${PKG_INFO} =~ *"${PACKAGE}"* ]]; then
          echo -e "${RED}Le packet ${PACKAGE} n'est pas trouvé dans la base de données..${NC}"
          exit 1
        elif [[ -z ${PKG_INFO} ]]; then
          echo -e "${RED}Le packet ${PACKAGE} n'est pas trouvé dans la base de données..${NC}"
          exit 1
        fi
    fi

    if ! [[ -f "${CACHE_FILE}/core.db.tar.gz" || -f "${CACHE_FILE}/multilib.db.tar.gz" || -f "${CACHE_FILE}/extra.db.tar.gz" || -f "${CACHE_FILE}/cydra.tar.gz" ]]; then
         if [ "$PRINT_LOG" = true ]; then
         echo -e "${RED}Des fichiers obligatoires pour la mise en point de la base de donnee sont introuvables..\nEtes vous sur d'etre connecte a internet ?\n\nSi oui la raison peu venir d'un mirror defecteux pour le reparer utilisez \n cydramanager fetch"
         fi
         exit 1
    fi

    ask_to_continue

    install_packet
    install_deps


    if [ "${WASH_CACHE}" = true ]; then
       rm -rf "/etc/cydramanager"
    fi
elif [[ "$1" == "remove" ]]; then
    if [ "$PRINT_LOG" = true ]; then
       echo -e "${GREEN}Suppression du paquet $PACKAGE${NC}"
    fi
    if ! command -v "$PACKAGE" >/dev/null 2>&1; then
        if [ "$PRINT_LOG" = true ]; then
           echo -e "${RED}Le paquet $PACKAGE n'est pas installe${NC}"
        fi
        exit 1
    fi
    PKG_FILES=$(find / -name "*${PACKAGE}*")
    for FILE in $PKG_FILES; do
        if [ -f "$FILE" ]; then
            rm "$FILE"
        elif [ -d "$FILE" ]; then
            rm -r "$FILE"
        fi
    done
    if [ "$PRINT_LOG" = true ]; then
       echo -e "${GREEN}Le paquet $PACKAGE a ete supprime avec succes${NC}"
    fi
elif [[ "$1" == "version" ]]; then
  if [ "$PRINT_LOG" = true ]; then
     echo "Cydramanager: VERSION 1.6 Beta"
  fi
elif [[ "$1" == "fetch" ]]; then
  if [ "$PRINT_LOG" = true ]; then
     echo -e "${GREEN}Mise a jour du menu fetch${NC}"
  fi

  rm -f /etc/cydrafetch/1.mirror
  rm -f /etc/cydrafetch/2.mirror
  rm -f /etc/cydrafetch/3.mirror
  rm -f /etc/cydrafetch/4.mirror

  wget ${PM_URL}/fetch/1.mirror -P ${FETCH_DIR} --no-check-certificate -q
  wget ${PM_URL}/fetch/2.mirror -P ${FETCH_DIR} --no-check-certificate -q
  wget ${PM_URL}/fetch/3.mirror -P ${FETCH_DIR} --no-check-certificate -q
  wget ${PM_URL}/fetch/4.mirror -P ${FETCH_DIR} --no-check-certificate -q

  firstMirror=$(cat /etc/cydrafetch/1.mirror)
  secondMirror=$(cat /etc/cydrafetch/2.mirror)
  thirdMirror=$(cat /etc/cydrafetch/3.mirror)
  lastMirror=$(cat /etc/cydrafetch/4.mirror)

      if [ "$PRINT_LOG" = true ]; then
         echo -e "${GREEN}============================= INTERFACE FETCH                                                                  ${NC}"
         echo -e "${RED}   OS) ${PM_URL}                                                                                                 ${NC}"
         echo -e "${RED}   1) ${firstMirror}                                                                                             ${NC}"
         echo -e "${RED}   2) ${secondMirror}                                                                                            ${NC}"
         echo -e "${RED}   3) ${thirdMirror}                                                                                             ${NC}"
         echo -e "${RED}   4) ${lastMirror}                                                                                              ${NC}"
         echo -en "${GREEN}   Selectionnez un nombre entre (OS) 1 - 4:                                                                   ${NC}"*
      fi
         read fetchRequest
      if [ "$PRINT_LOG" = true ]; then
         echo -e "${GREEN}=============================================                                                                  ${NC}"
      fi

      if [ "${fetchRequest}" == "1" ]; then
         fetch_warninglog

          rm -f /etc/cydrafetch/currentMirror
          touch currentMirror
          echo ${firstMirror} > /etc/cydrafetch/currentMirror
          exit 0
      elif [ "${fetchRequest}" == "2" ]; then
          fetch_warninglog

          rm -f /etc/cydrafetch/currentMirror
          touch currentMirror
          echo ${secondMirror} > /etc/cydrafetch/currentMirror
          exit 0
      elif [ "${fetchRequest}" == "3" ]; then
          fetch_warninglog

          rm -f /etc/cydrafetch/currentMirror
          touch currentMirror
          echo ${thirdMirror} > /etc/cydrafetch/currentMirror
          exit 0
      elif [ "${fetchRequest}" == "4" ]; then
          fetch_warninglog

          rm -f /etc/cydrafetch/currentMirror
          touch currentMirror
          echo ${lastMirror} > /etc/cydrafetch/currentMirror
          exit 0
      else
          echo -e "${RED}Veuillez choisir l'un de ces 4 mirrors. Votre reponse: ${fetchRequest} est invalide${NC}"
          exit 1
      fi

elif [[ "$1" == "help" ]]; then
   open_help
elif [[ "$1" == "update" ]]; then
    if ! [[ -d ${CACHE_FILE} ]]; then
       mkdir -p ${CACHE_FILE}
       mkdir -p ${INSTALL_DIR}
    elif [ "$WASH_CACHE" = true ]; then
         rm -rf ${CACHE_FILE}/*
         rm -rf ${INSTALL_DIR}*
    fi
  echo -e "${GREEN}Lancement de la mise a jour${NC}"
  echo -e "${GREEN}Installation de tout les packages de la mise a jour..${NC}"
  wget -r ${CORE_DL} -P ${CACHE_FILE} -q
  wget ${CYDRA_DL}/cm_latest -P ${CACHE_FILE} -q
  if ! [[ -f "${CACHE_FILE}/core.db.tar.gz" || -f "${CACHE_FILE}/multilib.db.tar.gz" || -f "${CACHE_FILE}/extra.db.tar.gz" || -f "${CACHE_FILE}/cydra.tar.gz" ]]; then
        if [ "$PRINT_LOG" = true ]; then
            echo -e "${RED} Des fichiers obligatoires pour la mise en point de la base de donnee sont introuvables..\n Etes vous sur d'etre connectes a internet ?\n\nSi oui la raison viens peu etre d'un mirror defecteux pour le repare utilisez \n cydramanager fetch"
        fi
        exit 1
  fi
  echo -e "${GREEN}Nettoyage des packets inutile${NC}"
  wash_packet
  ask_to_continue

  tar xf ${CACHE_FILE}/*.pkg.tar.zst -C /
  echo -e "${GREEN}Votre systeme est a jour..${NC}"

  if [ "$WASH_CACHE" = true ]; then
      rm -rf "/etc/cydramanager"
  fi
elif [[ "$1" == "patchnote" ]]; then
  echo "Mise a jour du Patchnote."
  wget "https://raw.githubusercontent.com/acth2/CydraProject/main/packagemanager/changelogs.log" -P /etc/cydraterms --no-check-certificate -q
  cat /etc/cydraterms/changelogs.log
fi

exit 0
