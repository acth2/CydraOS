#!/bin/bash

# Définir les variables
MIRROR_URL="http://mirror.archlinux.ikoula.com/"
CORE_BRANCH="core"
COMMUNITY_BRANCH="community"
CACHE_FILE="/etc/cydramanager/cache"
INSTALL_DIR="/etc/cydramanager/installdir/"
DIRECTORY_ARG="core/os/x86_64/"
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

PRINT_LOG=true
REGISTER_VAR=true

# Traitement des arguments
for arg in "$@"; do
  case "$arg" in
    --without-printing-log)
      PRINT_LOG=false
      ;;
    --without-registering-var)
      REGISTER_VAR=false
      ;;
  esac
done

on_terminate() {
  if [ "$PRINT_LOG" = true ]; then
    echo -e "\n${RED}Le script a été interrompu.. \n Suppression des variables cache et install dir \n CODE D'ERREUR: INTERRUPTION SIGTERM (CTRL + C) ${NC}"
  fi
  rm -rf "${CACHE_FILE}"
  rm -rf "${INSTALL_DIR}"
}

trap 'on_terminate' SIGTERM

# Fonction d'aide
function show_help {
  if [ "$PRINT_LOG" = true ]; then
    echo "Cydramanager - Gestionnaire de paquets simple pour CydraOS"
    echo ""
    echo "Utilisation: cydramanager [install/remove] [nom_du_paquet]"
    echo ""
    echo "Options:"
    echo "  install              Installe le paquet spécifié"
    echo "  remove               Supprime le paquet spécifié"
    echo "  help                 Affiche ce message d'aide"
  fi
}

function install_deps {
  while read -r line; do
    lines+=("$line")
    if [[ "$line" == *"%*"* ]]; then
      break
    fi
    if [[ "$line" == "%MAKEDEPENDS%" ]]; then
      break
      flag0=1
    fi
  done < <(awk '/%DEPENDS%/ {flag=1; next} flag && !/^$/ {print; if (/^$/) exit}' $PKG_INFO)

  for line in "${lines[@]}"; do
    if [ "$PRINT_LOG" = true ]; then
      echo "$line"
    fi
    if [[ "$flag0" == "0" ]]; then
      if [ "$REGISTER_VAR" = true ]; then
        echo "$line"
        cydramanager install $line --add-as-depends
      else
        cydramanager install $line --without-registering-var --add-as-depends
      fi
    fi
  done

  declare -a lines2
  flag1=0

  while read -r line3; do
    lines2+=("$line3")
    if [[ "$line3" == *"%*"* ]]; then
      break
    fi
    if [[ "$line3" == "%MAKEDEPENDS%" ]]; then
      break
      flag1=1
    fi
  done < <(awk '/%OPTDEPENDS%/ {flag=1; next} flag && !/^$/ {print; if (/^$/) exit}' $PKG_INFO)

  for line in "${lines2[@]}"; do
    if [ "$PRINT_LOG" = true ]; then
      echo "$line3"
    fi
    if [[ "$flag1" == "0" ]]; then
      if [ "$REGISTER_VAR" = true ]; then
        echo "$line3"
        cydramanager install $line3 --add-as-depends
      else
        cydramanager install $line3 --without-registering-var --add-as-depends
      fi
    fi
  done
}

function load_var {
  if [ "$REGISTER_VAR" = true ]; then
    PACKAGE="$2"
    PKG_INFO=$(grep -r -l "$PACKAGE-" /etc/cydramanager/cache > /dev/null 2>&1 &)
    PKG_VERSION=$(sed -n 11p ${PKG_INFO} > /dev/null 2>&1 &)
    PKG_ARCHIVE=$(awk '/%FILENAME%/ {flag=1; next} flag {print; flag=0}' $PKG_INFO > /dev/null 2>&1 &)
  else
    PACKAGE="$2"
  fi
}

function creating_dir {
      mkdir ${CACHE_FILE}
      mkdir ${INSTALL_DIR}
}

function clean_up {
    rm -rf ${CACHE_FILE}
    rm -rf ${INSTALL_DIR}
}

function updating_localdatabase {
    wget ${MIRROR_URL}/${COMMUNITY_BRANCH}/community.db.tar.gz -P ${CACHE_FILE} --no-check-certificate > /dev/null 2>&1;
    wget ${MIRROR_URL}/${CORE_BRANCH}/core.db.tar.gz -P ${CACHE_FILE}/ --no-check-certificate > /dev/null 2>&1;
    tar xf ${CACHE_FILE}/core.db.tar.gz -C ${CACHE_FILE} > /dev/null 2>&1;
    tar xf ${CACHE_FILE}/community.db.tar.gz -C ${CACHE_FILE} > /dev/null 2>&1;
    echo -e "${GREEN}Les paquets sont mis a jour${NC}"
}

function install_prog {
    wget ${MIRROR_URL}/${COMMUNITY_BRANCH}/${DIRECTORY_ARG}${PKG_ARCHIVE} -P ${INSTALL_DIR} --no-check-certificate > /dev/null 2>&1;
    wget ${MIRROR_URL}/${CORE_BRANCH}/${DIRECTORY_ARG}${PKG_ARCHIVE} -P ${INSTALL_DIR} --no-check-certificate > /dev/null 2>&1;
    tar xf ${INSTALL_DIR}${PKG_ARCHIVE} -C /
}


while true; do

# Vérifier que l'argument d'action est valide
if [[ "$1" != "install" && "$1" != "remove" ]]; then
    echo -e "${RED}L'action est invalide. Etes vous perdu? \n cydramanager -h pour ouvrir la liste des commandes / arguments disponibles !${NC}"
    exit 1
fi

if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}Ce script doit être exécuté avec les privilèges root${NC}" 
   exit 1
fi

if [[ $# -eq 0 ]]; then
    show_help
    exit 0
elif [[ $# -ne 2 ]]; then
    echo -e "${RED}Deux arguments sont nécessaires (install/remove) et le nom du paquet${NC}"
    exit 1
fi

# Installer le paquet
if [[ "$1" == "install" ]]; then
     creating_dir
     updating_localdatabase
     load_var

     install_prog
     install_deps

     clean_up

     echo -e "${GREEN}Le paquet $PACKAGE a été installé avec succès${NC}"
elif [[ "$1" == "remove" ]]; then
    echo -e "${GREEN}Suppression du paquet $PACKAGE${NC}"
    if ! command -v "$PACKAGE" >/dev/null 2>&1; then
        echo -e "${RED}Le paquet $PACKAGE n'est pas installé${NC}"
        exit 1
    fi
    PKG_FILES=$(find / -name "*${PACKAGE}*")
    for FILE in $PKG_FILES; do
        if [ -f "$FILE" ]; then
            rm "$FILE"
        elif [ -d "$FILE" ]; then
            rm -r "$FILE"
        fi
    done
    echo -e "${GREEN}Le paquet $PACKAGE a été supprimé avec succès${NC}"
fi

exit 0
done
